@page "/trainer"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<h1>Trainer Dashboard</h1>

@if (repositories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <select @onchange="OnSelectedRepositoryChanged">
        <option value="">Selecteer een repository</option>
        @foreach (var repo in repositories)
        {
            <option value="@repo.Name">@repo.Name</option>
        }
    </select>

    @if (!string.IsNullOrEmpty(selectedRepositoryId))
    {
        <p>Geselecteerde repository ID: @selectedRepositoryId</p>

        <button @onclick="GenerateStudentLabs">Maak student labs</button>

        @if (labContent == null && errorMessage == null)
        {
            <p><em>Lab inhoud laden...</em></p>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error">@errorMessage</p>
        }
        else
        {
            <h3>Lab inhoud</h3>
            <div class="lab-content">
                @((MarkupString)labContent)
            </div>
        }
    }
}

@code {
    private List<Repository> repositories;
    private string selectedRepositoryId;
    private string labContent;
    private string errorMessage;
    private string githubUsername;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var githubToken = Configuration["GitHubToken"];
            githubUsername = Configuration["GitHubUsername"];

            if (!string.IsNullOrEmpty(githubToken))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("token", githubToken);
            }

            repositories = await Http.GetFromJsonAsync<List<Repository>>("http://localhost:5264/api/repositories");
        }
        catch (Exception ex)
        {
            errorMessage = $"Fout bij het ophalen van repositories: {ex.Message}";
            Console.WriteLine($"Error fetching repositories: {ex.Message}");
        }
    }

    private async Task OnSelectedRepositoryChanged(ChangeEventArgs e)
    {
        selectedRepositoryId = e.Value.ToString();
        labContent = null;
        errorMessage = null;

        try
        {
            var githubToken = Configuration["GitHubToken"];

            if (!string.IsNullOrEmpty(githubToken))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("token", githubToken);
            }

            // Hardcoded branch voor specifieke repository
            string branch = "master";
            if (selectedRepositoryId == "MS-4010-Extend-Microsoft365-Copilot-declarative-agents-VS-Code")
            {
                branch = "main";
            }

            // Correcte URL met de juiste branch
            labContent = await Http.GetStringAsync($"http://localhost:5264/api/repositories/{selectedRepositoryId}/content?ref={branch}");
            labContent = Markdig.Markdown.ToHtml(labContent);
        }
        catch (Exception ex)
        {
            errorMessage = $"Fout bij het ophalen van lab inhoud: {ex.Message}";
            Console.WriteLine($"Fout bij het ophalen van lab inhoud: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task<string> GetDefaultBranch(string repositoryId)
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"https://api.github.com/repos/{githubUsername}/{repositoryId}");
            var githubToken = Configuration["GitHubToken"];

            if (!string.IsNullOrEmpty(githubToken))
            {
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("token", githubToken);
            }

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/vnd.github.v3+json"));

            var response = await Http.SendAsync(request);

            // Log rate-limit headers
            if (response.Headers.TryGetValues("X-RateLimit-Limit", out var limitValues))
            {
                Console.WriteLine($"Rate Limit: {limitValues.FirstOrDefault()}");
            }
            if (response.Headers.TryGetValues("X-RateLimit-Remaining", out var remainingValues))
            {
                Console.WriteLine($"Rate Limit Remaining: {remainingValues.FirstOrDefault()}");
            }
            if (response.Headers.TryGetValues("X-RateLimit-Reset", out var resetValues))
            {
                if (long.TryParse(resetValues.FirstOrDefault(), out var resetTimestamp))
                {
                    var resetDateTime = DateTimeOffset.FromUnixTimeSeconds(resetTimestamp).LocalDateTime;
                    Console.WriteLine($"Rate Limit Reset: {resetDateTime}");
                }
            }

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Fout bij het ophalen van de standaard branch: {response.StatusCode} ({response.ReasonPhrase})");
                return "master"; // Fallback naar "master" bij een fout
            }

            var gitHubRepository = await response.Content.ReadFromJsonAsync<GitHubRepository>();
            return gitHubRepository?.DefaultBranch ?? "master"; // Fallback naar "master" als de API-aanroep mislukt
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fout bij het ophalen van de standaard branch: {ex.Message}");
            return "master"; // Fallback naar "master" bij een fout
        }
    }

    private void GenerateStudentLabs()
    {
        if (!string.IsNullOrEmpty(selectedRepositoryId))
        {
            NavigationManager.NavigateTo($"/studentlabs/{selectedRepositoryId}");
        }
    }

    public class Repository
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

    public class GitHubRepository
    {
        public string DefaultBranch { get; set; }
    }
}