@page "/trainer"
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<h1>Trainer Dashboard</h1>

@if (repositories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <select @onchange="OnSelectedRepositoryChanged">
        <option value="">Selecteer een repository</option>
        @foreach (var repo in repositories)
        {
            <option value="@repo.Name">@repo.Name</option>
        }
    </select>

    @if (!string.IsNullOrEmpty(selectedRepositoryId))
    {
        <p>Geselecteerde repository ID: @selectedRepositoryId</p>

        <button @onclick="GenerateStudentLabs">Maak student labs</button>

        @if (labContent == null && errorMessage == null)
        {
            <p><em>Lab inhoud laden...</em></p>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error">@errorMessage</p>
        }
        else
        {
            <h3>Lab inhoud</h3>
            <div class="lab-content">
                @((MarkupString)labContent)
            </div>
        }
    }
}

@code {
    private List<Repository> repositories;
    private string selectedRepositoryId;
    private string labContent;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            repositories = await GetRepositories();
        }
        catch (Exception ex)
        {
            errorMessage = $"Fout bij het ophalen van repositories: {ex.Message}";
            Console.WriteLine($"Error fetching repositories: {ex.Message}");
        }
    }

    private async Task<List<Repository>> GetRepositories()
    {
        var functionKey = Configuration["FunctionKey"]; // Haal de Function key op uit appsettings.json
        var functionApiKey = Configuration["FunctionApiKey"]; // haal de api key op uit appsettings.json
        var url = $"https://m365labfunctions.azurewebsites.net/api/repositories?code={functionApiKey}"; // voeg de key als queryparameter toe.
        var repositories = await Http.GetFromJsonAsync<List<Repository>>(url);
        return repositories;
    }

    private async Task OnSelectedRepositoryChanged(ChangeEventArgs e)
    {
        selectedRepositoryId = e.Value.ToString();
        labContent = null;
        errorMessage = null;

        try
        {
            labContent = await GetLabContent();
            labContent = Markdig.Markdown.ToHtml(labContent);
        }
        catch (Exception ex)
        {
            errorMessage = $"Fout bij het ophalen van lab inhoud: {ex.Message}";
            Console.WriteLine($"Fout bij het ophalen van lab inhoud: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task<string> GetLabContent()
    {
        var functionKey = Configuration["FunctionKey"];// Haal de Function key op uit appsettings.json
        var functionApiKey = Configuration["FunctionApiKey"]; // haal de api key op uit appsettings.json
        var url = $"https://m365labfunctions.azurewebsites.net/api/repositories/{selectedRepositoryId}/content?code={functionApiKey}";// voeg de key als queryparameter toe.
        var labContent = await Http.GetStringAsync(url);
        return labContent;
    }

    private void GenerateStudentLabs()
    {
        if (!string.IsNullOrEmpty(selectedRepositoryId))
        {
            NavigationManager.NavigateTo($"/studentlabs/{selectedRepositoryId}");
        }
    }

    public class Repository
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }
}